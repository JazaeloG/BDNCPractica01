/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.uv.bdncpractica01;

import java.awt.GridLayout;
import java.awt.HeadlessException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author omar_
 */
public class ProductosView extends javax.swing.JFrame {
    private DAOProducto daoE = new DAOProducto();
    private ProductoTableModel<PojoProducto> pro = null;

    /**
     * Creates new form ProductosView
     */
    public ProductosView() {
        initComponents();
        cargarTablaProductos();
        /*String [] columnNames = {"Clave", "Descripcion", "Precio Venta", "Precio Compra"};
        List<PojoProducto> lstProducto = daoE.buscarAll();
        pro = new ProductoTableModel<PojoProducto>(columnNames,lstProducto){
            @Override
            public Object getValueAt(int rowIndex, int columnIndex){
                switch(columnIndex){
                    case 0: return valores.get(rowIndex).getId();
                    case 1: return valores.get(rowIndex).getDescripcion();
                    case 2: return valores.get(rowIndex).getPrecioVenta();
                    case 3: return valores.get(rowIndex).getPrecioCompra();
                    default: return null;
                }
            }
        };
        jTableProductos.setModel(pro);*/
    }
    
    private void cargarTablaProductos() {
        try {
            DAOProducto daoProducto = new DAOProducto();
            List<PojoProducto> productos = daoProducto.cargarTodosLosProductos();

            DefaultTableModel model = (DefaultTableModel) jTableProductos.getModel();
            model.setRowCount(0); 

            for (PojoProducto producto : productos) {
                Object[] rowData = {producto.getId(), producto.getDescripcion(), producto.getPrecioVenta(), producto.getPrecioCompra()};
                model.addRow(rowData);
            }
            model.fireTableDataChanged();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar los productos");
        }
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTDescripcion = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTPrecioVenta = new javax.swing.JTextField();
        jTPrecioCompra = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProductos = new javax.swing.JTable();
        jBVerTodos = new javax.swing.JButton();
        jBBuscar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTIdentificador = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMGuardar = new javax.swing.JMenu();
        jConfirmarGuardado = new javax.swing.JMenuItem();
        jMModificar = new javax.swing.JMenu();
        jConfirmarModificacion = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMEliminar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Descripcion");

        jLabel2.setText("Precio Venta");

        jLabel3.setText("Precio Compra");

        jTableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Clave", "Descripcion", "Precio Venta", "Precio Compra"
            }
        ));
        jScrollPane1.setViewportView(jTableProductos);

        jBVerTodos.setText("Ver todos");
        jBVerTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVerTodosActionPerformed(evt);
            }
        });

        jBBuscar.setText("Buscar");
        jBBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarActionPerformed(evt);
            }
        });

        jLabel4.setText("Identificador");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTIdentificador, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                            .addComponent(jTPrecioCompra)
                            .addComponent(jTDescripcion)
                            .addComponent(jTPrecioVenta))
                        .addGap(18, 18, 18)
                        .addComponent(jBBuscar))
                    .addComponent(jBVerTodos)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTIdentificador, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBBuscar))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTPrecioCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(12, 12, 12)
                .addComponent(jBVerTodos)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(167, Short.MAX_VALUE))
        );

        jMGuardar.setText("Guardar");
        jMGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMGuardarActionPerformed(evt);
            }
        });

        jConfirmarGuardado.setText("Confirmar");
        jConfirmarGuardado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConfirmarGuardadoActionPerformed(evt);
            }
        });
        jMGuardar.add(jConfirmarGuardado);

        jMenuBar1.add(jMGuardar);

        jMModificar.setText("Modificar");
        jMModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMModificarActionPerformed(evt);
            }
        });

        jConfirmarModificacion.setText("Editar Producto");
        jConfirmarModificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConfirmarModificacionActionPerformed(evt);
            }
        });
        jMModificar.add(jConfirmarModificacion);

        jMenuBar1.add(jMModificar);

        jMenu3.setText("Eliminar");

        jMEliminar.setText("Confirmar Eliminacion");
        jMEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMEliminarActionPerformed(evt);
            }
        });
        jMenu3.add(jMEliminar);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarActionPerformed
        try{
            PojoProducto productoObtenido;
            Long id = Long.parseLong(jTIdentificador.getText());
            DAOProducto daoProducto = new DAOProducto();
            productoObtenido = daoProducto.buscarById(id);
            
            
            DefaultTableModel model =(DefaultTableModel) jTableProductos.getModel();
            model.setRowCount(0);
            Object[] rowData = {productoObtenido.getId(), productoObtenido.getDescripcion(), productoObtenido.getPrecioVenta(), productoObtenido.getPrecioCompra()};
            model.addRow(rowData);
            
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(this, "Error al buscar ese producto");
        }
    }//GEN-LAST:event_jBBuscarActionPerformed

    private void jBVerTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVerTodosActionPerformed
        try {
            DAOProducto daoProducto = new DAOProducto();
            List<PojoProducto> productos = daoProducto.buscarAll();

            DefaultTableModel model = (DefaultTableModel) jTableProductos.getModel();
            model.setRowCount(0); 
            
            for (PojoProducto producto : productos) {
                Object[] rowData = {producto.getId(), producto.getDescripcion(), producto.getPrecioVenta(), producto.getPrecioCompra()};
                model.addRow(rowData);
            }
            model.fireTableDataChanged();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al obtener todos los productos");
        }
    }//GEN-LAST:event_jBVerTodosActionPerformed

    private void jMGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMGuardarActionPerformed
        
    }//GEN-LAST:event_jMGuardarActionPerformed

    private void jMModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMModificarActionPerformed
        
    }//GEN-LAST:event_jMModificarActionPerformed

    private void jConfirmarGuardadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConfirmarGuardadoActionPerformed
        try{      
            PojoProducto producto = new PojoProducto();
            producto.setDescripcion(jTDescripcion.getText());
            producto.setPrecioVenta(Double.parseDouble(jTPrecioVenta.getText()));
            producto.setPrecioCompra(Double.parseDouble(jTPrecioCompra.getText()));
            
            DAOProducto daoProducto = new DAOProducto();
            daoProducto.guardar(producto);
            JOptionPane.showMessageDialog(this, "Producto agregado correctamente");
            jTDescripcion.setText("");
            jTPrecioCompra.setText("");
            jTPrecioVenta.setText("");
            cargarTablaProductos();
        } catch(HeadlessException | NumberFormatException e){
            JOptionPane.showMessageDialog(this, "Error al intentar agregar Producto");
        }
    }//GEN-LAST:event_jConfirmarGuardadoActionPerformed

    private void jConfirmarModificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConfirmarModificacionActionPerformed
        try {
            String idString = JOptionPane.showInputDialog(this, "Ingrese el ID del producto a modificar:");

            if (idString == null || idString.trim().isEmpty()) {
                return;
            }

            Long id = Long.parseLong(idString);
            DAOProducto daoProducto = new DAOProducto();
            PojoProducto producto = daoProducto.buscarById(id);

            if (producto == null) {
                JOptionPane.showMessageDialog(this, "No se encontró ningún producto con el ID proporcionado.");
                return;
            }

            String[] columnNames = {"ID", "Descripción", "Precio Venta", "Precio Compra"};
            Object[][] rowData = {{producto.getId(), producto.getDescripcion(), producto.getPrecioVenta(), producto.getPrecioCompra()}};
            JTable table = new JTable(rowData, columnNames);
            JScrollPane scrollPane = new JScrollPane(table);

            JTextField descripcionField = new JTextField(producto.getDescripcion());
            JTextField precioVentaField = new JTextField(String.valueOf(producto.getPrecioVenta()));
            JTextField precioCompraField = new JTextField(String.valueOf(producto.getPrecioCompra()));

            JPanel formPanel = new JPanel(new GridLayout(3, 2));
            formPanel.add(new JLabel("Descripción:"));
            formPanel.add(descripcionField);
            formPanel.add(new JLabel("Precio Venta:"));
            formPanel.add(precioVentaField);
            formPanel.add(new JLabel("Precio Compra:"));
            formPanel.add(precioCompraField);
            int option = JOptionPane.showConfirmDialog(this, new Object[]{scrollPane, formPanel}, "Modificar Producto", JOptionPane.OK_CANCEL_OPTION);

            if (option == JOptionPane.OK_OPTION) {
                String nuevaDescripcion = descripcionField.getText();
                double nuevoPrecioVenta = Double.parseDouble(precioVentaField.getText());
                double nuevoPrecioCompra = Double.parseDouble(precioCompraField.getText());

                producto.setDescripcion(nuevaDescripcion);
                producto.setPrecioVenta(nuevoPrecioVenta);
                producto.setPrecioCompra(nuevoPrecioCompra);

                if (daoProducto.modificar(producto)) {
                    cargarTablaProductos();
                    JOptionPane.showMessageDialog(this, "Producto modificado exitosamente.");
                } else {
                    JOptionPane.showMessageDialog(this, "Error al modificar el producto.");
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un ID válido y números válidos para los precios.");
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Error al intentar modificar el producto.");
        }
    }//GEN-LAST:event_jConfirmarModificacionActionPerformed

    private void jMEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMEliminarActionPerformed
        try {
            String idString = JOptionPane.showInputDialog(this, "Ingrese el ID del producto a eliminar:");

            if (idString == null || idString.trim().isEmpty()) {
                return; 
            }

            Long id = Long.parseLong(idString);
            DAOProducto daoProducto = new DAOProducto();
            PojoProducto producto = daoProducto.buscarById(id);

            if (producto == null) {
                JOptionPane.showMessageDialog(this, "No se encontró ningún producto con el ID proporcionado.");
                return;
            }
            String mensajeConfirmacion = String.format("¿Está seguro que desea eliminar el producto con ID %d y descripción \"%s\"?", producto.getId(), producto.getDescripcion());
            int confirmacion = JOptionPane.showConfirmDialog(this, mensajeConfirmacion, "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                if (daoProducto.eliminar(producto)) {
                    cargarTablaProductos();
                    JOptionPane.showMessageDialog(this, "Producto eliminado exitosamente.");
                } else {
                    JOptionPane.showMessageDialog(this, "Error al eliminar el producto.");
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un ID válido.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al intentar eliminar el producto.");
        }
    }//GEN-LAST:event_jMEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductosView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductosView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductosView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductosView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductosView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBuscar;
    private javax.swing.JButton jBVerTodos;
    private javax.swing.JMenuItem jConfirmarGuardado;
    private javax.swing.JMenuItem jConfirmarModificacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuItem jMEliminar;
    private javax.swing.JMenu jMGuardar;
    private javax.swing.JMenu jMModificar;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTDescripcion;
    private javax.swing.JTextField jTIdentificador;
    private javax.swing.JTextField jTPrecioCompra;
    private javax.swing.JTextField jTPrecioVenta;
    private javax.swing.JTable jTableProductos;
    // End of variables declaration//GEN-END:variables
}
